<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="2306"><g><title>__kdebug_trace_string (1 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0434%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (1 samples, 0.04%)</title><rect x="0.0434%" y="437" width="0.0434%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2934%" y="447.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (1 samples, 0.04%)</title><rect x="0.0434%" y="421" width="0.0434%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2934%" y="431.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (1 samples, 0.04%)</title><rect x="0.0434%" y="405" width="0.0434%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2934%" y="415.50"></text></g><g><title>dyld4::ExternallyViewableState::atlasAddImage(PropertyList::Dictionary&amp;, unsigned long long, char const*) (1 samples, 0.04%)</title><rect x="0.0434%" y="389" width="0.0434%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2934%" y="399.50"></text></g><g><title>0x18adf8fbb (1 samples, 0.04%)</title><rect x="0.0434%" y="373" width="0.0434%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2934%" y="383.50"></text></g><g><title>PropertyList::String::String(lsl::Allocator&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt;&gt;) (1 samples, 0.04%)</title><rect x="0.0434%" y="357" width="0.0434%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2934%" y="367.50"></text></g><g><title>lsl::Allocator::aligned_alloc(unsigned long long, unsigned long long) (1 samples, 0.04%)</title><rect x="0.0434%" y="341" width="0.0434%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2934%" y="351.50"></text></g><g><title>lsl::Allocator::AllocationMetadata::pool(bool) const (1 samples, 0.04%)</title><rect x="0.0434%" y="325" width="0.0434%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2934%" y="335.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="437" width="0.0434%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.3367%" y="447.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (1 samples, 0.04%)</title><rect x="0.0867%" y="421" width="0.0434%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.3367%" y="431.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="405" width="0.0434%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.3367%" y="415.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="389" width="0.0434%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.3367%" y="399.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="373" width="0.0434%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.3367%" y="383.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="357" width="0.0434%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.3367%" y="367.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="341" width="0.0434%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.3367%" y="351.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="325" width="0.0434%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.3367%" y="335.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="309" width="0.0434%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.3367%" y="319.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="293" width="0.0434%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.3367%" y="303.50"></text></g><g><title>dyld4::RuntimeState::notifyObjCInit(dyld4::Loader const*) (1 samples, 0.04%)</title><rect x="0.0867%" y="277" width="0.0434%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.3367%" y="287.50"></text></g><g><title>load_images (1 samples, 0.04%)</title><rect x="0.0867%" y="261" width="0.0434%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.3367%" y="271.50"></text></g><g><title>_NSInitializePlatform (1 samples, 0.04%)</title><rect x="0.0867%" y="245" width="0.0434%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.3367%" y="255.50"></text></g><g><title>_NSToDoAtProcessStart (1 samples, 0.04%)</title><rect x="0.0867%" y="229" width="0.0434%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.3367%" y="239.50"></text></g><g><title>_initializeSwiftRefcountingThenCallRelease(objc_object*) (1 samples, 0.04%)</title><rect x="0.0867%" y="213" width="0.0434%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.3367%" y="223.50"></text></g><g><title>dlopenHelper$libswiftCore.dylib (1 samples, 0.04%)</title><rect x="0.0867%" y="197" width="0.0434%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.3367%" y="207.50"></text></g><g><title>dyld4::APIs::dlopen(char const*, int) (1 samples, 0.04%)</title><rect x="0.0867%" y="181" width="0.0434%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.3367%" y="191.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*) (1 samples, 0.04%)</title><rect x="0.0867%" y="165" width="0.0434%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.3367%" y="175.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const (1 samples, 0.04%)</title><rect x="0.0867%" y="149" width="0.0434%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.3367%" y="159.50"></text></g><g><title>void dyld4::RuntimeLocks::withLoadersWriteLockAndProtectedStack&lt;dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()&gt;(dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;())::&apos;lambda&apos;()::operator()() const (1 samples, 0.04%)</title><rect x="0.0867%" y="133" width="0.0434%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.3367%" y="143.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()::operator()() const (1 samples, 0.04%)</title><rect x="0.0867%" y="117" width="0.0434%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.3367%" y="127.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.0867%" y="101" width="0.0434%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.3367%" y="111.50"></text></g><g><title>dyld4::ProcessConfig::canonicalDylibPathInCache(char const*) const (1 samples, 0.04%)</title><rect x="0.0867%" y="85" width="0.0434%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.3367%" y="95.50"></text></g><g><title>dyld4::ProcessConfig::DyldCache::getCanonicalPath(char const*) const (1 samples, 0.04%)</title><rect x="0.0867%" y="69" width="0.0434%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.3367%" y="79.50"></text></g><g><title>DyldSharedCache::hasImagePath(char const*, unsigned int&amp;) const (1 samples, 0.04%)</title><rect x="0.0867%" y="53" width="0.0434%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.3367%" y="63.50"></text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (1 samples, 0.04%)</title><rect x="0.0867%" y="37" width="0.0434%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.3367%" y="47.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (3 samples, 0.13%)</title><rect x="0.0434%" y="453" width="0.1301%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="3"/><text x="0.2934%" y="463.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.04%)</title><rect x="0.1301%" y="437" width="0.0434%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.3801%" y="447.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.04%)</title><rect x="0.1301%" y="421" width="0.0434%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="0.3801%" y="431.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.04%)</title><rect x="0.1301%" y="405" width="0.0434%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="0.3801%" y="415.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1301%" y="389" width="0.0434%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.3801%" y="399.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1301%" y="373" width="0.0434%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.3801%" y="383.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1301%" y="357" width="0.0434%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.3801%" y="367.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.04%)</title><rect x="0.1301%" y="341" width="0.0434%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.3801%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.04%)</title><rect x="0.1301%" y="325" width="0.0434%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.3801%" y="335.50"></text></g><g><title>libSystem_initializer (1 samples, 0.04%)</title><rect x="0.1301%" y="309" width="0.0434%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.3801%" y="319.50"></text></g><g><title>_sanitizers_init (1 samples, 0.04%)</title><rect x="0.1301%" y="293" width="0.0434%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.3801%" y="303.50"></text></g><g><title>config::env::Parser::consumeEnv(char const**) (1 samples, 0.04%)</title><rect x="0.1301%" y="277" width="0.0434%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.3801%" y="287.50"></text></g><g><title>config::env::Parser::getConfig() const (1 samples, 0.04%)</title><rect x="0.1301%" y="261" width="0.0434%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.3801%" y="271.50"></text></g><g><title>long config::env::Parser::getNumber&lt;long, &amp;strtol&gt;(char const*, long) const (1 samples, 0.04%)</title><rect x="0.1301%" y="245" width="0.0434%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1"/><text x="0.3801%" y="255.50"></text></g><g><title>_simple_getenv (1 samples, 0.04%)</title><rect x="0.1301%" y="229" width="0.0434%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="0.3801%" y="239.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.04%)</title><rect x="0.1735%" y="453" width="0.0434%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1"/><text x="0.4235%" y="463.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="437" width="0.0434%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1"/><text x="0.4235%" y="447.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="421" width="0.0434%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1"/><text x="0.4235%" y="431.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="405" width="0.0434%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="0.4235%" y="415.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="389" width="0.0434%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="0.4235%" y="399.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="373" width="0.0434%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="0.4235%" y="383.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="357" width="0.0434%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1"/><text x="0.4235%" y="367.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="341" width="0.0434%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1"/><text x="0.4235%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.1735%" y="325" width="0.0434%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1"/><text x="0.4235%" y="335.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.04%)</title><rect x="0.1735%" y="309" width="0.0434%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="1"/><text x="0.4235%" y="319.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.04%)</title><rect x="0.1735%" y="293" width="0.0434%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="1"/><text x="0.4235%" y="303.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.04%)</title><rect x="0.1735%" y="277" width="0.0434%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="1"/><text x="0.4235%" y="287.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2168%" y="437" width="0.0434%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="1"/><text x="0.4668%" y="447.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2168%" y="421" width="0.0434%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="1"/><text x="0.4668%" y="431.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2168%" y="405" width="0.0434%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="1"/><text x="0.4668%" y="415.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2168%" y="389" width="0.0434%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="1"/><text x="0.4668%" y="399.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2168%" y="373" width="0.0434%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="1"/><text x="0.4668%" y="383.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2168%" y="357" width="0.0434%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="1"/><text x="0.4668%" y="367.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.2168%" y="341" width="0.0434%" height="15" fill="rgb(246,177,23)" fg:x="5" fg:w="1"/><text x="0.4668%" y="351.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2168%" y="325" width="0.0434%" height="15" fill="rgb(230,62,27)" fg:x="5" fg:w="1"/><text x="0.4668%" y="335.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.2168%" y="309" width="0.0434%" height="15" fill="rgb(216,154,8)" fg:x="5" fg:w="1"/><text x="0.4668%" y="319.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2168%" y="293" width="0.0434%" height="15" fill="rgb(244,35,45)" fg:x="5" fg:w="1"/><text x="0.4668%" y="303.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (7 samples, 0.30%)</title><rect x="0.0000%" y="485" width="0.3036%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="7"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (7 samples, 0.30%)</title><rect x="0.0000%" y="469" width="0.3036%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="7"/><text x="0.2500%" y="479.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (2 samples, 0.09%)</title><rect x="0.2168%" y="453" width="0.0867%" height="15" fill="rgb(233,84,52)" fg:x="5" fg:w="2"/><text x="0.4668%" y="463.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2602%" y="437" width="0.0434%" height="15" fill="rgb(207,117,47)" fg:x="6" fg:w="1"/><text x="0.5102%" y="447.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2602%" y="421" width="0.0434%" height="15" fill="rgb(249,43,39)" fg:x="6" fg:w="1"/><text x="0.5102%" y="431.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2602%" y="405" width="0.0434%" height="15" fill="rgb(209,38,44)" fg:x="6" fg:w="1"/><text x="0.5102%" y="415.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2602%" y="389" width="0.0434%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="1"/><text x="0.5102%" y="399.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2602%" y="373" width="0.0434%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="1"/><text x="0.5102%" y="383.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.2602%" y="357" width="0.0434%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="1"/><text x="0.5102%" y="367.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.2602%" y="341" width="0.0434%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="1"/><text x="0.5102%" y="351.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.2602%" y="325" width="0.0434%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="1"/><text x="0.5102%" y="335.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.2602%" y="309" width="0.0434%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="1"/><text x="0.5102%" y="319.50"></text></g><g><title>dyld4::Loader::makeDiskLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (1 samples, 0.04%)</title><rect x="0.2602%" y="293" width="0.0434%" height="15" fill="rgb(235,213,38)" fg:x="6" fg:w="1"/><text x="0.5102%" y="303.50"></text></g><g><title>dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (1 samples, 0.04%)</title><rect x="0.2602%" y="277" width="0.0434%" height="15" fill="rgb(237,122,38)" fg:x="6" fg:w="1"/><text x="0.5102%" y="287.50"></text></g><g><title>dyld4::JustInTimeLoader::withRegions(dyld3::MachOFile const*, void (dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.2602%" y="261" width="0.0434%" height="15" fill="rgb(244,218,35)" fg:x="6" fg:w="1"/><text x="0.5102%" y="271.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (1 samples, 0.04%)</title><rect x="0.2602%" y="245" width="0.0434%" height="15" fill="rgb(240,68,47)" fg:x="6" fg:w="1"/><text x="0.5102%" y="255.50"></text></g><g><title>__mmap (1 samples, 0.04%)</title><rect x="0.2602%" y="229" width="0.0434%" height="15" fill="rgb(210,16,53)" fg:x="6" fg:w="1"/><text x="0.5102%" y="239.50"></text></g><g><title>std::sys::net::connection::socket::TcpListener::bind (1 samples, 0.04%)</title><rect x="0.3036%" y="421" width="0.0434%" height="15" fill="rgb(235,124,12)" fg:x="7" fg:w="1"/><text x="0.5536%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.04%)</title><rect x="0.3036%" y="405" width="0.0434%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="0.5536%" y="415.50"></text></g><g><title>__bind (1 samples, 0.04%)</title><rect x="0.3036%" y="389" width="0.0434%" height="15" fill="rgb(250,166,2)" fg:x="7" fg:w="1"/><text x="0.5536%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="0.3469%" y="405" width="0.0434%" height="15" fill="rgb(242,216,29)" fg:x="8" fg:w="1"/><text x="0.5969%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="0.3469%" y="389" width="0.0434%" height="15" fill="rgb(230,116,27)" fg:x="8" fg:w="1"/><text x="0.5969%" y="399.50"></text></g><g><title>syfala_test_server::main::_{{closure}} (1 samples, 0.04%)</title><rect x="0.3469%" y="373" width="0.0434%" height="15" fill="rgb(228,99,48)" fg:x="8" fg:w="1"/><text x="0.5969%" y="383.50"></text></g><g><title>jack::client::client_impl::Client::register_port (1 samples, 0.04%)</title><rect x="0.3469%" y="357" width="0.0434%" height="15" fill="rgb(253,11,6)" fg:x="8" fg:w="1"/><text x="0.5969%" y="367.50"></text></g><g><title>jack_sys::functions::dynamic_loading::jack_port_register (1 samples, 0.04%)</title><rect x="0.3469%" y="341" width="0.0434%" height="15" fill="rgb(247,143,39)" fg:x="8" fg:w="1"/><text x="0.5969%" y="351.50"></text></g><g><title>jack_port_register (1 samples, 0.04%)</title><rect x="0.3469%" y="325" width="0.0434%" height="15" fill="rgb(236,97,10)" fg:x="8" fg:w="1"/><text x="0.5969%" y="335.50"></text></g><g><title>Jack::JackClient::PortRegister(char const*, char const*, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="0.3469%" y="309" width="0.0434%" height="15" fill="rgb(233,208,19)" fg:x="8" fg:w="1"/><text x="0.5969%" y="319.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::size[abi:ne180100]() const (1 samples, 0.04%)</title><rect x="0.3469%" y="293" width="0.0434%" height="15" fill="rgb(216,164,2)" fg:x="8" fg:w="1"/><text x="0.5969%" y="303.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__is_long[abi:ne180100]() const (1 samples, 0.04%)</title><rect x="0.3469%" y="277" width="0.0434%" height="15" fill="rgb(220,129,5)" fg:x="8" fg:w="1"/><text x="0.5969%" y="287.50"></text></g><g><title>std::__1::__compressed_pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__rep, std::__1::allocator&lt;char&gt;&gt;::first[abi:ne180100]() const (1 samples, 0.04%)</title><rect x="0.3469%" y="261" width="0.0434%" height="15" fill="rgb(242,17,10)" fg:x="8" fg:w="1"/><text x="0.5969%" y="271.50"></text></g><g><title>jack_sys::functions::dynamic_loading::jack_client_open (1 samples, 0.04%)</title><rect x="0.3903%" y="389" width="0.0434%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="1"/><text x="0.6403%" y="399.50"></text></g><g><title>jack_client_open (1 samples, 0.04%)</title><rect x="0.3903%" y="373" width="0.0434%" height="15" fill="rgb(251,28,31)" fg:x="9" fg:w="1"/><text x="0.6403%" y="383.50"></text></g><g><title>jack_client_open_aux(char const*, JackOptions, JackStatus*, char*) (1 samples, 0.04%)</title><rect x="0.3903%" y="357" width="0.0434%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="1"/><text x="0.6403%" y="367.50"></text></g><g><title>Jack::JackLibClient::Open(char const*, char const*, unsigned long long, JackOptions, JackStatus*) (1 samples, 0.04%)</title><rect x="0.3903%" y="341" width="0.0434%" height="15" fill="rgb(215,21,27)" fg:x="9" fg:w="1"/><text x="0.6403%" y="351.50"></text></g><g><title>Jack::JackShmReadWritePtr&lt;Jack::JackGraphManager&gt;::SetShmIndex(int, char const*) (1 samples, 0.04%)</title><rect x="0.3903%" y="325" width="0.0434%" height="15" fill="rgb(232,23,21)" fg:x="9" fg:w="1"/><text x="0.6403%" y="335.50"></text></g><g><title>Jack::JackShmReadWritePtr&lt;Jack::JackGraphManager&gt;::Init(int, char const*) (1 samples, 0.04%)</title><rect x="0.3903%" y="309" width="0.0434%" height="15" fill="rgb(244,5,23)" fg:x="9" fg:w="1"/><text x="0.6403%" y="319.50"></text></g><g><title>Jack::JackShmMemAble::LockMemory() (1 samples, 0.04%)</title><rect x="0.3903%" y="293" width="0.0434%" height="15" fill="rgb(226,81,46)" fg:x="9" fg:w="1"/><text x="0.6403%" y="303.50"></text></g><g><title>mlock (1 samples, 0.04%)</title><rect x="0.3903%" y="277" width="0.0434%" height="15" fill="rgb(247,70,30)" fg:x="9" fg:w="1"/><text x="0.6403%" y="287.50"></text></g><g><title>jack_sys::library (1 samples, 0.04%)</title><rect x="0.4337%" y="389" width="0.0434%" height="15" fill="rgb(212,68,19)" fg:x="10" fg:w="1"/><text x="0.6837%" y="399.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 0.04%)</title><rect x="0.4337%" y="373" width="0.0434%" height="15" fill="rgb(240,187,13)" fg:x="10" fg:w="1"/><text x="0.6837%" y="383.50"></text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 0.04%)</title><rect x="0.4337%" y="357" width="0.0434%" height="15" fill="rgb(223,113,26)" fg:x="10" fg:w="1"/><text x="0.6837%" y="367.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.04%)</title><rect x="0.4337%" y="341" width="0.0434%" height="15" fill="rgb(206,192,2)" fg:x="10" fg:w="1"/><text x="0.6837%" y="351.50"></text></g><g><title>dyld4::APIs::dlopen(char const*, int) (1 samples, 0.04%)</title><rect x="0.4337%" y="325" width="0.0434%" height="15" fill="rgb(241,108,4)" fg:x="10" fg:w="1"/><text x="0.6837%" y="335.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*) (1 samples, 0.04%)</title><rect x="0.4337%" y="309" width="0.0434%" height="15" fill="rgb(247,173,49)" fg:x="10" fg:w="1"/><text x="0.6837%" y="319.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const (1 samples, 0.04%)</title><rect x="0.4337%" y="293" width="0.0434%" height="15" fill="rgb(224,114,35)" fg:x="10" fg:w="1"/><text x="0.6837%" y="303.50"></text></g><g><title>void dyld4::RuntimeLocks::withLoadersWriteLockAndProtectedStack&lt;dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()&gt;(dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;())::&apos;lambda&apos;()::operator()() const (1 samples, 0.04%)</title><rect x="0.4337%" y="277" width="0.0434%" height="15" fill="rgb(245,159,27)" fg:x="10" fg:w="1"/><text x="0.6837%" y="287.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()::operator()() const (1 samples, 0.04%)</title><rect x="0.4337%" y="261" width="0.0434%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="1"/><text x="0.6837%" y="271.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.4337%" y="245" width="0.0434%" height="15" fill="rgb(236,23,11)" fg:x="10" fg:w="1"/><text x="0.6837%" y="255.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.4337%" y="229" width="0.0434%" height="15" fill="rgb(205,117,38)" fg:x="10" fg:w="1"/><text x="0.6837%" y="239.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.4337%" y="213" width="0.0434%" height="15" fill="rgb(237,72,25)" fg:x="10" fg:w="1"/><text x="0.6837%" y="223.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.4337%" y="197" width="0.0434%" height="15" fill="rgb(244,70,9)" fg:x="10" fg:w="1"/><text x="0.6837%" y="207.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.04%)</title><rect x="0.4337%" y="181" width="0.0434%" height="15" fill="rgb(217,125,39)" fg:x="10" fg:w="1"/><text x="0.6837%" y="191.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (1 samples, 0.04%)</title><rect x="0.4337%" y="165" width="0.0434%" height="15" fill="rgb(235,36,10)" fg:x="10" fg:w="1"/><text x="0.6837%" y="175.50"></text></g><g><title>mach_o::Header::installName() const (1 samples, 0.04%)</title><rect x="0.4337%" y="149" width="0.0434%" height="15" fill="rgb(251,123,47)" fg:x="10" fg:w="1"/><text x="0.6837%" y="159.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (1 samples, 0.04%)</title><rect x="0.4337%" y="133" width="0.0434%" height="15" fill="rgb(221,13,13)" fg:x="10" fg:w="1"/><text x="0.6837%" y="143.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.4337%" y="117" width="0.0434%" height="15" fill="rgb(238,131,9)" fg:x="10" fg:w="1"/><text x="0.6837%" y="127.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.04%)</title><rect x="0.4770%" y="277" width="0.0434%" height="15" fill="rgb(211,50,8)" fg:x="11" fg:w="1"/><text x="0.7270%" y="287.50"></text></g><g><title>start (17 samples, 0.74%)</title><rect x="0.0000%" y="501" width="0.7372%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="17"/><text x="0.2500%" y="511.50"></text></g><g><title>main (10 samples, 0.43%)</title><rect x="0.3036%" y="485" width="0.4337%" height="15" fill="rgb(242,14,37)" fg:x="7" fg:w="10"/><text x="0.5536%" y="495.50"></text></g><g><title>std::rt::lang_start_internal (10 samples, 0.43%)</title><rect x="0.3036%" y="469" width="0.4337%" height="15" fill="rgb(246,228,12)" fg:x="7" fg:w="10"/><text x="0.5536%" y="479.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (10 samples, 0.43%)</title><rect x="0.3036%" y="453" width="0.4337%" height="15" fill="rgb(213,55,15)" fg:x="7" fg:w="10"/><text x="0.5536%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.43%)</title><rect x="0.3036%" y="437" width="0.4337%" height="15" fill="rgb(209,9,3)" fg:x="7" fg:w="10"/><text x="0.5536%" y="447.50"></text></g><g><title>syfala_test_server::main (9 samples, 0.39%)</title><rect x="0.3469%" y="421" width="0.3903%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="9"/><text x="0.5969%" y="431.50"></text></g><g><title>jack::client::client_impl::Client::new (8 samples, 0.35%)</title><rect x="0.3903%" y="405" width="0.3469%" height="15" fill="rgb(209,121,21)" fg:x="9" fg:w="8"/><text x="0.6403%" y="415.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (6 samples, 0.26%)</title><rect x="0.4770%" y="389" width="0.2602%" height="15" fill="rgb(220,109,13)" fg:x="11" fg:w="6"/><text x="0.7270%" y="399.50"></text></g><g><title>std::sync::poison::once::Once::call_once_force::_{{closure}} (6 samples, 0.26%)</title><rect x="0.4770%" y="373" width="0.2602%" height="15" fill="rgb(232,18,1)" fg:x="11" fg:w="6"/><text x="0.7270%" y="383.50"></text></g><g><title>jack_sys::functions::dynamic_loading::jack_set_error_function (6 samples, 0.26%)</title><rect x="0.4770%" y="357" width="0.2602%" height="15" fill="rgb(215,41,42)" fg:x="11" fg:w="6"/><text x="0.7270%" y="367.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (6 samples, 0.26%)</title><rect x="0.4770%" y="341" width="0.2602%" height="15" fill="rgb(224,123,36)" fg:x="11" fg:w="6"/><text x="0.7270%" y="351.50"></text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (6 samples, 0.26%)</title><rect x="0.4770%" y="325" width="0.2602%" height="15" fill="rgb(240,125,3)" fg:x="11" fg:w="6"/><text x="0.7270%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.26%)</title><rect x="0.4770%" y="309" width="0.2602%" height="15" fill="rgb(205,98,50)" fg:x="11" fg:w="6"/><text x="0.7270%" y="319.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.26%)</title><rect x="0.4770%" y="293" width="0.2602%" height="15" fill="rgb(205,185,37)" fg:x="11" fg:w="6"/><text x="0.7270%" y="303.50"></text></g><g><title>dyld4::APIs::dlsym(void*, char const*) (5 samples, 0.22%)</title><rect x="0.5204%" y="277" width="0.2168%" height="15" fill="rgb(238,207,15)" fg:x="12" fg:w="5"/><text x="0.7704%" y="287.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (5 samples, 0.22%)</title><rect x="0.5204%" y="261" width="0.2168%" height="15" fill="rgb(213,199,42)" fg:x="12" fg:w="5"/><text x="0.7704%" y="271.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (5 samples, 0.22%)</title><rect x="0.5204%" y="245" width="0.2168%" height="15" fill="rgb(235,201,11)" fg:x="12" fg:w="5"/><text x="0.7704%" y="255.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (5 samples, 0.22%)</title><rect x="0.5204%" y="229" width="0.2168%" height="15" fill="rgb(207,46,11)" fg:x="12" fg:w="5"/><text x="0.7704%" y="239.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (5 samples, 0.22%)</title><rect x="0.5204%" y="213" width="0.2168%" height="15" fill="rgb(241,35,35)" fg:x="12" fg:w="5"/><text x="0.7704%" y="223.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (5 samples, 0.22%)</title><rect x="0.5204%" y="197" width="0.2168%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="5"/><text x="0.7704%" y="207.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (4 samples, 0.17%)</title><rect x="0.5637%" y="181" width="0.1735%" height="15" fill="rgb(247,202,23)" fg:x="13" fg:w="4"/><text x="0.8137%" y="191.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (3 samples, 0.13%)</title><rect x="0.6071%" y="165" width="0.1301%" height="15" fill="rgb(219,102,11)" fg:x="14" fg:w="3"/><text x="0.8571%" y="175.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (3 samples, 0.13%)</title><rect x="0.6071%" y="149" width="0.1301%" height="15" fill="rgb(243,110,44)" fg:x="14" fg:w="3"/><text x="0.8571%" y="159.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (2 samples, 0.09%)</title><rect x="0.6505%" y="133" width="0.0867%" height="15" fill="rgb(222,74,54)" fg:x="15" fg:w="2"/><text x="0.9005%" y="143.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.04%)</title><rect x="0.6938%" y="117" width="0.0434%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="1"/><text x="0.9438%" y="127.50"></text></g><g><title>Jack::JackLibClient::GetEngineControl() const (1 samples, 0.04%)</title><rect x="1.0408%" y="405" width="0.0434%" height="15" fill="rgb(226,22,26)" fg:x="24" fg:w="1"/><text x="1.2908%" y="415.50"></text></g><g><title>&lt;jack::contrib::closure::ClosureProcessHandler&lt;(),ProcessCallback&gt; as jack::client::callbacks::ProcessHandler&gt;::process (1 samples, 0.04%)</title><rect x="1.3010%" y="389" width="0.0434%" height="15" fill="rgb(217,163,10)" fg:x="30" fg:w="1"/><text x="1.5510%" y="399.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="1.3443%" y="389" width="0.0434%" height="15" fill="rgb(213,25,53)" fg:x="31" fg:w="1"/><text x="1.5943%" y="399.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.13%)</title><rect x="1.3877%" y="389" width="0.1301%" height="15" fill="rgb(252,105,26)" fg:x="32" fg:w="3"/><text x="1.6377%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="1.5178%" y="389" width="0.0434%" height="15" fill="rgb(220,39,43)" fg:x="35" fg:w="1"/><text x="1.7678%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="1.5611%" y="389" width="0.0434%" height="15" fill="rgb(229,68,48)" fg:x="36" fg:w="1"/><text x="1.8111%" y="399.50"></text></g><g><title>rtrb::chunks::_&lt;impl rtrb::Consumer&lt;T&gt;&gt;::read_chunk (1 samples, 0.04%)</title><rect x="1.6045%" y="389" width="0.0434%" height="15" fill="rgb(252,8,32)" fg:x="37" fg:w="1"/><text x="1.8545%" y="399.50"></text></g><g><title>CheckPort(unsigned int) (23 samples, 1.00%)</title><rect x="3.8161%" y="325" width="0.9974%" height="15" fill="rgb(223,20,43)" fg:x="88" fg:w="23"/><text x="4.0661%" y="335.50"></text></g><g><title>Jack::GetGraphManager() (6 samples, 0.26%)</title><rect x="4.8135%" y="325" width="0.2602%" height="15" fill="rgb(229,81,49)" fg:x="111" fg:w="6"/><text x="5.0635%" y="335.50"></text></g><g><title>Jack::JackGlobals::CheckContext(char const*) (3 samples, 0.13%)</title><rect x="5.0737%" y="325" width="0.1301%" height="15" fill="rgb(236,28,36)" fg:x="117" fg:w="3"/><text x="5.3237%" y="335.50"></text></g><g><title>Jack::AssertBufferSize(unsigned int) (2 samples, 0.09%)</title><rect x="9.1500%" y="309" width="0.0867%" height="15" fill="rgb(249,185,26)" fg:x="211" fg:w="2"/><text x="9.4000%" y="319.50"></text></g><g><title>Jack::JackAtomicState&lt;Jack::JackConnectionManager&gt;::ReadCurrentState() (10 samples, 0.43%)</title><rect x="9.2368%" y="309" width="0.4337%" height="15" fill="rgb(249,174,33)" fg:x="213" fg:w="10"/><text x="9.4868%" y="319.50"></text></g><g><title>Jack::JackConnectionManager::Connections(unsigned int) const (18 samples, 0.78%)</title><rect x="9.6704%" y="309" width="0.7806%" height="15" fill="rgb(233,201,37)" fg:x="223" fg:w="18"/><text x="9.9204%" y="319.50"></text></g><g><title>Jack::JackFixedArray&lt;2048&gt;::GetItemCount() const (5 samples, 0.22%)</title><rect x="10.2342%" y="293" width="0.2168%" height="15" fill="rgb(221,78,26)" fg:x="236" fg:w="5"/><text x="10.4842%" y="303.50"></text></g><g><title>Jack::JackGraphManager::AssertPort(unsigned int) (5 samples, 0.22%)</title><rect x="10.4510%" y="309" width="0.2168%" height="15" fill="rgb(250,127,30)" fg:x="241" fg:w="5"/><text x="10.7010%" y="319.50"></text></g><g><title>Jack::JackGraphManager::GetBuffer(unsigned int) (15 samples, 0.65%)</title><rect x="10.6678%" y="309" width="0.6505%" height="15" fill="rgb(230,49,44)" fg:x="246" fg:w="15"/><text x="10.9178%" y="319.50"></text></g><g><title>Jack::JackPort::GetBuffer() (6 samples, 0.26%)</title><rect x="11.0581%" y="293" width="0.2602%" height="15" fill="rgb(229,67,23)" fg:x="255" fg:w="6"/><text x="11.3081%" y="303.50"></text></g><g><title>Jack::JackGraphManager::GetPort(unsigned int) (20 samples, 0.87%)</title><rect x="11.3183%" y="309" width="0.8673%" height="15" fill="rgb(249,83,47)" fg:x="261" fg:w="20"/><text x="11.5683%" y="319.50"></text></g><g><title>Jack::JackGraphManager::AssertPort(unsigned int) (8 samples, 0.35%)</title><rect x="11.8387%" y="293" width="0.3469%" height="15" fill="rgb(215,43,3)" fg:x="273" fg:w="8"/><text x="12.0887%" y="303.50"></text></g><g><title>Jack::JackPort::IsUsed() const (2 samples, 0.09%)</title><rect x="12.1856%" y="309" width="0.0867%" height="15" fill="rgb(238,154,13)" fg:x="281" fg:w="2"/><text x="12.4356%" y="319.50"></text></g><g><title>Jack::JackGraphManager::GetBuffer(unsigned int, unsigned int) (167 samples, 7.24%)</title><rect x="5.2038%" y="325" width="7.2420%" height="15" fill="rgb(219,56,2)" fg:x="120" fg:w="167"/><text x="5.4538%" y="335.50">Jack::Jack..</text></g><g><title>___chkstk_darwin (4 samples, 0.17%)</title><rect x="12.2723%" y="309" width="0.1735%" height="15" fill="rgb(233,0,4)" fg:x="283" fg:w="4"/><text x="12.5223%" y="319.50"></text></g><g><title>Jack::JackClient::CallProcessCallback() (272 samples, 11.80%)</title><rect x="0.9540%" y="421" width="11.7953%" height="15" fill="rgb(235,30,7)" fg:x="22" fg:w="272"/><text x="1.2040%" y="431.50">Jack::JackClient:..</text></g><g><title>jack::client::callbacks::process (269 samples, 11.67%)</title><rect x="1.0841%" y="405" width="11.6652%" height="15" fill="rgb(250,79,13)" fg:x="25" fg:w="269"/><text x="1.3341%" y="415.50">jack::client::cal..</text></g><g><title>syfala_test_server::main::_{{closure}} (256 samples, 11.10%)</title><rect x="1.6479%" y="389" width="11.1015%" height="15" fill="rgb(211,146,34)" fg:x="38" fg:w="256"/><text x="1.8979%" y="399.50">syfala_test_serv..</text></g><g><title>jack::port::audio::_&lt;impl jack::port::port_impl::Port&lt;jack::port::audio::AudioOut&gt;&gt;::as_mut_slice (252 samples, 10.93%)</title><rect x="1.8213%" y="373" width="10.9280%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="252"/><text x="2.0713%" y="383.50">jack::port::audi..</text></g><g><title>jack_sys::functions::dynamic_loading::jack_port_get_buffer (248 samples, 10.75%)</title><rect x="1.9948%" y="357" width="10.7546%" height="15" fill="rgb(235,168,5)" fg:x="46" fg:w="248"/><text x="2.2448%" y="367.50">jack_sys::functi..</text></g><g><title>jack_port_get_buffer (245 samples, 10.62%)</title><rect x="2.1249%" y="341" width="10.6245%" height="15" fill="rgb(221,155,16)" fg:x="49" fg:w="245"/><text x="2.3749%" y="351.50">jack_port_get_bu..</text></g><g><title>___chkstk_darwin (7 samples, 0.30%)</title><rect x="12.4458%" y="325" width="0.3036%" height="15" fill="rgb(215,215,53)" fg:x="287" fg:w="7"/><text x="12.6958%" y="335.50"></text></g><g><title>Jack::JackLibClient::GetEngineControl() const (2 samples, 0.09%)</title><rect x="12.8361%" y="389" width="0.0867%" height="15" fill="rgb(223,4,10)" fg:x="296" fg:w="2"/><text x="13.0861%" y="399.50"></text></g><g><title>Jack::JackClient::CallTimebaseCallbackAux() (5 samples, 0.22%)</title><rect x="12.7493%" y="405" width="0.2168%" height="15" fill="rgb(234,103,6)" fg:x="294" fg:w="5"/><text x="12.9993%" y="415.50"></text></g><g><title>Jack::JackTransportEngine::GetTimebaseMaster(int&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="12.9228%" y="389" width="0.0434%" height="15" fill="rgb(227,97,0)" fg:x="298" fg:w="1"/><text x="13.1728%" y="399.50"></text></g><g><title>GetMicroSeconds (14 samples, 0.61%)</title><rect x="21.4224%" y="357" width="0.6071%" height="15" fill="rgb(234,150,53)" fg:x="494" fg:w="14"/><text x="21.6724%" y="367.50"></text></g><g><title>mach_absolute_time (14 samples, 0.61%)</title><rect x="21.4224%" y="341" width="0.6071%" height="15" fill="rgb(228,201,54)" fg:x="494" fg:w="14"/><text x="21.6724%" y="351.50"></text></g><g><title>DEC_ATOMIC(int volatile*) (23 samples, 1.00%)</title><rect x="22.1162%" y="341" width="0.9974%" height="15" fill="rgb(222,22,37)" fg:x="510" fg:w="23"/><text x="22.3662%" y="351.50"></text></g><g><title>Jack::JackMachSemaphore::Signal() (477 samples, 20.69%)</title><rect x="23.1136%" y="341" width="20.6852%" height="15" fill="rgb(237,53,32)" fg:x="533" fg:w="477"/><text x="23.3636%" y="351.50">Jack::JackMachSemaphore::Signal()</text></g><g><title>semaphore_signal_trap (473 samples, 20.51%)</title><rect x="23.2871%" y="325" width="20.5117%" height="15" fill="rgb(233,25,53)" fg:x="537" fg:w="473"/><text x="23.5371%" y="335.50">semaphore_signal_trap</text></g><g><title>Jack::JackActivationCount::Signal(Jack::JackMachSemaphore*, Jack::JackClientControl*) (755 samples, 32.74%)</title><rect x="22.0295%" y="357" width="32.7407%" height="15" fill="rgb(210,40,34)" fg:x="508" fg:w="755"/><text x="22.2795%" y="367.50">Jack::JackActivationCount::Signal(Jack::JackMachSemap..</text></g><g><title>semaphore_signal_trap (253 samples, 10.97%)</title><rect x="43.7988%" y="341" width="10.9714%" height="15" fill="rgb(241,220,44)" fg:x="1010" fg:w="253"/><text x="44.0488%" y="351.50">semaphore_signal..</text></g><g><title>Jack::JackGraphManager::ResumeRefNum(Jack::JackClientControl*, Jack::JackMachSemaphore*) (974 samples, 42.24%)</title><rect x="12.9662%" y="389" width="42.2376%" height="15" fill="rgb(235,28,35)" fg:x="299" fg:w="974"/><text x="13.2162%" y="399.50">Jack::JackGraphManager::ResumeRefNum(Jack::JackClientControl*, Jack::..</text></g><g><title>Jack::JackConnectionManager::ResumeRefNum(Jack::JackClientControl*, Jack::JackMachSemaphore*, Jack::JackClientTiming*) (971 samples, 42.11%)</title><rect x="13.0963%" y="373" width="42.1075%" height="15" fill="rgb(210,56,17)" fg:x="302" fg:w="971"/><text x="13.3463%" y="383.50">Jack::JackConnectionManager::ResumeRefNum(Jack::JackClientControl*, J..</text></g><g><title>mach_absolute_time (10 samples, 0.43%)</title><rect x="54.7702%" y="357" width="0.4337%" height="15" fill="rgb(224,130,29)" fg:x="1263" fg:w="10"/><text x="55.0202%" y="367.50"></text></g><g><title>Jack::JackLibClient::GetClientControl() const (4 samples, 0.17%)</title><rect x="55.2038%" y="389" width="0.1735%" height="15" fill="rgb(235,212,8)" fg:x="1273" fg:w="4"/><text x="55.4538%" y="399.50"></text></g><g><title>Jack::JackShmReadWritePtr1&lt;Jack::JackClientControl&gt;::operator Jack::JackClientControl*() const (1 samples, 0.04%)</title><rect x="55.3339%" y="373" width="0.0434%" height="15" fill="rgb(223,33,50)" fg:x="1276" fg:w="1"/><text x="55.5839%" y="383.50"></text></g><g><title>Jack::JackClient::CycleSignalAux(int) (986 samples, 42.76%)</title><rect x="12.7493%" y="421" width="42.7580%" height="15" fill="rgb(219,149,13)" fg:x="294" fg:w="986"/><text x="12.9993%" y="431.50">Jack::JackClient::CycleSignalAux(int)</text></g><g><title>Jack::JackClient::SignalSync() (981 samples, 42.54%)</title><rect x="12.9662%" y="405" width="42.5412%" height="15" fill="rgb(250,156,29)" fg:x="299" fg:w="981"/><text x="13.2162%" y="415.50">Jack::JackClient::SignalSync()</text></g><g><title>Jack::JackLibClient::GetGraphManager() const (3 samples, 0.13%)</title><rect x="55.3773%" y="389" width="0.1301%" height="15" fill="rgb(216,193,19)" fg:x="1277" fg:w="3"/><text x="55.6273%" y="399.50"></text></g><g><title>Jack::JackShmReadWritePtr&lt;Jack::JackGraphManager&gt;::operator Jack::JackGraphManager*() const (1 samples, 0.04%)</title><rect x="55.4640%" y="373" width="0.0434%" height="15" fill="rgb(216,135,14)" fg:x="1279" fg:w="1"/><text x="55.7140%" y="383.50"></text></g><g><title>Jack::JackClient::CallSyncCallbackAux() (7 samples, 0.30%)</title><rect x="55.7676%" y="405" width="0.3036%" height="15" fill="rgb(241,47,5)" fg:x="1286" fg:w="7"/><text x="56.0176%" y="415.50"></text></g><g><title>Jack::JackLibClient::GetClientControl() const (5 samples, 0.22%)</title><rect x="55.8543%" y="389" width="0.2168%" height="15" fill="rgb(233,42,35)" fg:x="1288" fg:w="5"/><text x="56.1043%" y="399.50"></text></g><g><title>Jack::JackShmReadWritePtr1&lt;Jack::JackClientControl&gt;::operator Jack::JackClientControl*() const (2 samples, 0.09%)</title><rect x="55.9844%" y="373" width="0.0867%" height="15" fill="rgb(231,13,6)" fg:x="1291" fg:w="2"/><text x="56.2344%" y="383.50"></text></g><g><title>GetMicroSeconds (17 samples, 0.74%)</title><rect x="56.7216%" y="357" width="0.7372%" height="15" fill="rgb(207,181,40)" fg:x="1308" fg:w="17"/><text x="56.9716%" y="367.50"></text></g><g><title>mach_absolute_time (13 samples, 0.56%)</title><rect x="56.8951%" y="341" width="0.5637%" height="15" fill="rgb(254,173,49)" fg:x="1312" fg:w="13"/><text x="57.1451%" y="351.50"></text></g><g><title>DYLD-STUB$$semaphore_timedwait (1 samples, 0.04%)</title><rect x="58.3261%" y="341" width="0.0434%" height="15" fill="rgb(221,1,38)" fg:x="1345" fg:w="1"/><text x="58.5761%" y="351.50"></text></g><g><title>Jack::JackMachSemaphore::TimedWait(long) (578 samples, 25.07%)</title><rect x="57.4588%" y="357" width="25.0650%" height="15" fill="rgb(206,124,46)" fg:x="1325" fg:w="578"/><text x="57.7088%" y="367.50">Jack::JackMachSemaphore::TimedWait(long)</text></g><g><title>semaphore_timedwait_trap (557 samples, 24.15%)</title><rect x="58.3695%" y="341" width="24.1544%" height="15" fill="rgb(249,21,11)" fg:x="1346" fg:w="557"/><text x="58.6195%" y="351.50">semaphore_timedwait_trap</text></g><g><title>mach_absolute_time (4 samples, 0.17%)</title><rect x="82.5239%" y="357" width="0.1735%" height="15" fill="rgb(222,201,40)" fg:x="1903" fg:w="4"/><text x="82.7739%" y="367.50"></text></g><g><title>Jack::JackGraphManager::SuspendRefNum(Jack::JackClientControl*, Jack::JackMachSemaphore*, long) (999 samples, 43.32%)</title><rect x="56.3747%" y="389" width="43.3218%" height="15" fill="rgb(235,61,29)" fg:x="1300" fg:w="999"/><text x="56.6247%" y="399.50">Jack::JackGraphManager::SuspendRefNum(Jack::JackClientControl*, Jack::J..</text></g><g><title>Jack::JackConnectionManager::SuspendRefNum(Jack::JackClientControl*, Jack::JackMachSemaphore*, Jack::JackClientTiming*, long) (999 samples, 43.32%)</title><rect x="56.3747%" y="373" width="43.3218%" height="15" fill="rgb(219,207,3)" fg:x="1300" fg:w="999"/><text x="56.6247%" y="383.50">Jack::JackConnectionManager::SuspendRefNum(Jack::JackClientControl*, Ja..</text></g><g><title>semaphore_timedwait_trap (392 samples, 17.00%)</title><rect x="82.6973%" y="357" width="16.9991%" height="15" fill="rgb(222,56,46)" fg:x="1907" fg:w="392"/><text x="82.9473%" y="367.50">semaphore_timedwait_trap</text></g><g><title>Jack::JackLibClient::GetClientControl() const (1 samples, 0.04%)</title><rect x="99.6964%" y="389" width="0.0434%" height="15" fill="rgb(239,76,54)" fg:x="2299" fg:w="1"/><text x="99.9464%" y="399.50"></text></g><g><title>Jack::JackClient::WaitSync() (1,009 samples, 43.76%)</title><rect x="56.0711%" y="405" width="43.7554%" height="15" fill="rgb(231,124,27)" fg:x="1293" fg:w="1009"/><text x="56.3211%" y="415.50">Jack::JackClient::WaitSync()</text></g><g><title>Jack::JackLibClient::GetGraphManager() const (2 samples, 0.09%)</title><rect x="99.7398%" y="389" width="0.0867%" height="15" fill="rgb(249,195,6)" fg:x="2300" fg:w="2"/><text x="99.9898%" y="399.50"></text></g><g><title>Jack::JackShmReadWritePtr&lt;Jack::JackGraphManager&gt;::operator Jack::JackGraphManager*() const (1 samples, 0.04%)</title><rect x="99.7832%" y="373" width="0.0434%" height="15" fill="rgb(237,174,47)" fg:x="2301" fg:w="1"/><text x="100.0332%" y="383.50"></text></g><g><title>all (2,306 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="2306"/><text x="0.2500%" y="527.50"></text></g><g><title>thread_start (2,289 samples, 99.26%)</title><rect x="0.7372%" y="501" width="99.2628%" height="15" fill="rgb(231,57,52)" fg:x="17" fg:w="2289"/><text x="0.9872%" y="511.50">thread_start</text></g><g><title>_pthread_start (2,289 samples, 99.26%)</title><rect x="0.7372%" y="485" width="99.2628%" height="15" fill="rgb(248,177,22)" fg:x="17" fg:w="2289"/><text x="0.9872%" y="495.50">_pthread_start</text></g><g><title>Jack::JackPosixThread::ThreadHandler(void*) (2,289 samples, 99.26%)</title><rect x="0.7372%" y="469" width="99.2628%" height="15" fill="rgb(215,211,37)" fg:x="17" fg:w="2289"/><text x="0.9872%" y="479.50">Jack::JackPosixThread::ThreadHandler(void*)</text></g><g><title>Jack::JackClient::Execute() (2,289 samples, 99.26%)</title><rect x="0.7372%" y="453" width="99.2628%" height="15" fill="rgb(241,128,51)" fg:x="17" fg:w="2289"/><text x="0.9872%" y="463.50">Jack::JackClient::Execute()</text></g><g><title>Jack::JackClient::ExecuteThread() (2,289 samples, 99.26%)</title><rect x="0.7372%" y="437" width="99.2628%" height="15" fill="rgb(227,165,31)" fg:x="17" fg:w="2289"/><text x="0.9872%" y="447.50">Jack::JackClient::ExecuteThread()</text></g><g><title>Jack::JackClient::CycleWaitAux() (1,026 samples, 44.49%)</title><rect x="55.5074%" y="421" width="44.4926%" height="15" fill="rgb(228,167,24)" fg:x="1280" fg:w="1026"/><text x="55.7574%" y="431.50">Jack::JackClient::CycleWaitAux()</text></g><g><title>Jack::JackLibClient::GetEngineControl() const (4 samples, 0.17%)</title><rect x="99.8265%" y="405" width="0.1735%" height="15" fill="rgb(228,143,12)" fg:x="2302" fg:w="4"/><text x="100.0765%" y="415.50"></text></g><g><title>Jack::JackShmReadWritePtr&lt;Jack::JackEngineControl&gt;::operator Jack::JackEngineControl*() const (2 samples, 0.09%)</title><rect x="99.9133%" y="389" width="0.0867%" height="15" fill="rgb(249,149,8)" fg:x="2304" fg:w="2"/><text x="100.1633%" y="399.50"></text></g></svg></svg>